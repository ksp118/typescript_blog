name: Deploy TypeScript Blog to EC2

on:
  push:
    branches: [main]

env:
  NODE_VERSION: "20"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Node.js 설정
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # 3) 의존성 설치
      - name: Install dependencies
        run: |
          npm install
          npm install --workspace=server
          npm install --workspace=frontend

      # 4) 프론트엔드 빌드
      - name: Build frontend
        run: npm run build --workspace=frontend

      # 5) 서버 빌드
      - name: Build server
        run: |
          npm run build --workspace=server
          npm ci --omit=dev --ignore-scripts --workspace=server

      # 6) 배포 번들 준비
      - name: Prepare deployment bundle
        run: |
          # 서버 배포 준비
          mkdir -p deploy/app deploy/app/sql
          cp -r server/dist deploy/app/
          cp server/package*.json deploy/app/

          # sql문 저장
          cp -r server/sql deploy/app/sql

          # PM2 설정 파일
          cp server/ecosystem.config.js deploy/app/

          # 프론트엔드 배포 준비
          mkdir -p deploy/static
          cp -r frontend/dist/* deploy/static/

      # 7) EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          source: "deploy/*"
          target: "/tmp/blog-deploy"
          strip_components: 1

      # 8) EC2에서 배포 완료
      - name: Finalize deployment on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -euo pipefail

            echo "🚀 Starting deployment..."

            # ── 변수 ─────────────────────────────────
            APP_ROOT="/srv/blog-backend"
            NEW_RELEASE="/tmp/blog-deploy/app"
            STATIC_SRC="/tmp/blog-deploy/static"
            TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
            BACKUP_DIR="$APP_ROOT/releases/${TIMESTAMP}_prev"

            # ── 디렉터리 준비 ────────────────────────
            mkdir -p "$APP_ROOT/releases" "$APP_ROOT/logs/pm2" /srv/blog
            echo "📁 Cleaning up: moving current to backup"
            if [ -L "$APP_ROOT/current" ]; then
              mv "$(readlink -f "$APP_ROOT/current")" "$BACKUP_DIR"
            fi

            # ── 새 릴리스 배치 ───────────────────────
            NEW_DIR="$APP_ROOT/releases/${TIMESTAMP}"
            mv "$NEW_RELEASE" "$NEW_DIR"
            ln -sfn "$NEW_DIR" "$APP_ROOT/current"

            # ── .env 배치 ────────────────────────────
            cp "/home/${{ secrets.EC2_USERNAME }}/secrets/.env" "$APP_ROOT/current/.env.prod"

            # 프런트엔드 정적 파일
            rsync -a --delete "$STATIC_SRC/" /srv/blog/

            # ── 의존성 설치 ──────────────────────────
            cd "$APP_ROOT/current"
            npm ci --omit=dev --ignore-scripts

            # ── PM2 리로드 ──────────────────────────
            pm2 delete blog-backend 2>/dev/null || true
            pm2 start "$APP_ROOT/current/ecosystem.config.js" --env production
            pm2 save

            echo "✅ Deployment completed!"

            git pull 
            # ── cleanup ─────────────────────────────
            rm -rf /tmp/blog-deploy
